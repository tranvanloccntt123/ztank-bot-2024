
export const dodgeBullets = (
  tankPosition: Position,
  bullets: Array<Bullet>,
  ms: number,
  stepCount: number 
): boolean => {
  if (
    tankPosition.x >= 900 ||
    tankPosition.x < 0 ||
    tankPosition.y >= 700 ||
    tankPosition.y < 0
  ) {
    return false;
  }
  if (stepCount >= 4) {
    return false;
  }
  for (const bullet of bullets) {
    if (bullet.uid === myTank?.uid) {
      continue;
    }
    const position = bulletPositionAtPlustime(bullet, ms);
    if (checkBulletInsideBlock(position)) {
      continue;
    }
    if (
      bulletInsideTankVertical(tankPosition, {
        x: bullet?.x ?? 0,
        y: bullet?.y ?? 0,
      }) &&
      ["DOWN", "UP"].includes(bullet.orient)
    ) {
      // Dan dang trong phuong thang dung: DOWN | UP
      const checkBulletMiddleTanks = Math.abs(
        tankPosition.x -
          (position?.x ?? 0) +
          (position?.x < tankPosition.x ? BulletSize : 0)
      );
      const distanceToTank = Math.abs(position?.y - tankPosition.y);
      if (distanceToTank > TankSize * 7) {
        continue;
      }
      let moveLeftPosition = 0;
      let moveRightPosition = 0;
      //todo check orient
      if (checkBulletMiddleTanks === (TankSize - BulletSize) / 2) {
        //dan chinh giua tank
        if (distanceToTank > checkBulletMiddleTanks) {
          moveLeftPosition = TankSize - (TankSize - BulletSize) / 2;
          moveRightPosition = TankSize - (TankSize - BulletSize) / 2;
        }
      } else {
        //dan o vi tri ben trai hoac phai tank
        if (distanceToTank > checkBulletMiddleTanks) {
          moveLeftPosition = TankSize - checkBulletMiddleTanks;
        }
        if (distanceToTank > TankSize - (TankSize - checkBulletMiddleTanks)) {
          moveRightPosition = TankSize - (TankSize - checkBulletMiddleTanks);
        }
      }

      if (position?.y > tankPosition.y && bullet.orient === "UP") {
        // dang tu duoi bay len
        if (distanceToTank < checkBulletMiddleTanks) {
          return false;
        }
      }
      if (position?.y < tankPosition.y && bullet.orient === "DOWN") {
        // dang tu tren bay xuong
        if (distanceToTank < checkBulletMiddleTanks) {
          return false;
        }
      }
      //LEFT
      if (moveLeftPosition > 0) {
        let step = moveLeftPosition / TankSpeed + 5;
        if (step > parseInt(step.toString(), 10)) {
          step++;
        }
        for (let i = 0; i <= step; i++) {
          if (
            checkTankPositionIsObject({
              x: tankPosition.x - i * TankSpeed,
              y: tankPosition.y,
            })
          ) {
            return false;
          }
        }
        dodgeRoad.push({
          orient: "LEFT",
          count: parseInt(step.toString(), 10),
        });
        const response = dodgeBullets(
          { x: tankPosition.x - step * TankSpeed, y: tankPosition.y },
          bullets,
          ms + TankTimeSpeed * step,
          stepCount + 1
        );
        if (response) {
          return response;
        }
        dodgeRoad.pop();
      }

      //RIGHT
      if (moveRightPosition) {
        let step = moveRightPosition / TankSpeed + 5;
        if (step > parseInt(step.toString(), 10)) {
          step++;
        }
        for (let i = 0; i <= step; i++) {
          if (
            checkTankPositionIsObject({
              x: tankPosition.x + i * TankSpeed,
              y: tankPosition.y,
            })
          ) {
            return false;
          }
        }
        dodgeRoad.push({ orient: "RIGHT", count: parseInt(step.toString()) });
        const response = dodgeBullets(
          { x: tankPosition.x + step * TankSpeed, y: tankPosition.y },
          bullets,
          ms + TankTimeSpeed * step,
          stepCount + 1
        );
        if (response) {
          return response;
        }
        dodgeRoad.pop();
      }
    }
    if (
      bulletInsideTankHorizontal(tankPosition, {
        x: bullet.x ?? 0,
        y: bullet.y ?? 0,
      }) &&
      ["RIGHT", "LEFT"].includes(bullet.orient)
    ) {
      const checkBulletMiddleTanks = Math.abs(
        tankPosition.y -
          (position?.y ?? 0) +
          (position?.y < tankPosition.y ? BulletSize : 0)
      );
      const distanceToTank = Math.abs(position?.x - tankPosition.x);
      if (distanceToTank > TankSize * 7) {
        continue;
      }
      let moveUpPosition = 0;
      let moveDownPosition = 0;
      if (checkBulletMiddleTanks === (TankSize - BulletSize) / 2) {
        //dan chinh giua tank
        if (distanceToTank > checkBulletMiddleTanks) {
          moveUpPosition = TankSize - (TankSize - BulletSize) / 2;
          moveDownPosition = TankSize - (TankSize - BulletSize) / 2;
        }
      } else {
        //dan o vi tri ben trai hoac phai tank
        if (distanceToTank > checkBulletMiddleTanks) {
          moveUpPosition = TankSize - checkBulletMiddleTanks;
        }
        if (distanceToTank > TankSize - (TankSize - checkBulletMiddleTanks)) {
          moveDownPosition = TankSize - (TankSize - checkBulletMiddleTanks);
        }
      }
      if (position?.x > tankPosition.x && bullet.orient === "LEFT") {
        //dang tu phai bay qua
        if (distanceToTank < checkBulletMiddleTanks) {
          return false;
        }
      }
      if (position?.x < tankPosition.x && bullet.orient === "RIGHT") {
        //dang tu trai bay qua
        if (distanceToTank < checkBulletMiddleTanks) {
          return false;
        }
      }
      //UP
      if (moveUpPosition > 0) {
        let step = moveUpPosition / TankSpeed + 5;
        if (step > parseInt(step.toString(), 10)) {
          step++;
        }
        for (let i = 0; i <= step; i++) {
          if (
            checkTankPositionIsObject({
              x: tankPosition.x,
              y: tankPosition.y - i * TankSpeed,
            })
          ) {
            return false;
          }
        }
        dodgeRoad.push({
          orient: "UP",
          count: parseInt(step.toString(), 10),
        });
        const response = dodgeBullets(
          { x: tankPosition.x, y: tankPosition.y - step * TankSpeed },
          bullets,
          ms + TankTimeSpeed * step,
          stepCount + 1
        );
        if (response) {
          return response;
        }
        dodgeRoad.pop();
      }

      //DOWN
      if (moveDownPosition) {
        let step = moveUpPosition / TankSpeed + 5;
        if (step > parseInt(step.toString(), 10)) {
          step++;
        }
        for (let i = 0; i <= step; i++) {
          if (
            checkTankPositionIsObject({
              x: tankPosition.x,
              y: tankPosition.y + i * TankSpeed,
            })
          ) {
            return false;
          }
        }
        dodgeRoad.push({
          orient: "DOWN",
          count: parseInt(step.toString(), 10),
        });
        const response = dodgeBullets(
          { x: tankPosition.x, y: tankPosition.y + step * ObjectSize },
          bullets,
          ms + TankTimeSpeed * step,
          stepCount + 1
        );
        if (response) {
          return response;
        }
        dodgeRoad.pop();
      }
    }
  }
  return dodgeRoad.length > 0;
};
